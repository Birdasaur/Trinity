# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Gradle Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

permissions:
  contents: write

concurrency:
  group: gradle-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:

  build-jar:

    name: jar / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build Jar
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean assemble -Penv=prod-jar

      - name: Upload Jar
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jar
          path: build/libs/*-fx.jar
          retention-days: 10
          if-no-files-found: error

      - name: Release Jar
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          RELEASE_NAME: trinity-${{ runner.os }}-java-${{ matrix.jdk-version }}
        shell: bash
        run: |
          mv build/libs/*-no-fx.jar "$RELEASE_NAME-slim.jar"
          mv build/libs/*-fx.jar "$RELEASE_NAME.jar"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            zip "$RELEASE_NAME-jar.zip" "$RELEASE_NAME.jar"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a "$RELEASE_NAME-jar.zip" "$RELEASE_NAME.jar"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            zip "$RELEASE_NAME-jar.zip" "$RELEASE_NAME.jar"
            zip "trinity-java-${{ matrix.jdk-version }}-slim-jar.zip" "$RELEASE_NAME-slim.jar"
            gh release upload "${{ github.ref_name }}" "trinity-java-${{ matrix.jdk-version }}-slim-jar.zip"
          else
            exit 1
          fi
          gh release upload "${{ github.ref_name }}" "$RELEASE_NAME-jar.zip"

  build-jlink:

    name: jlink / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build JLink Zip
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean jlink -Penv=prod-jlink

      - name: Upload JLink Zip
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jlink-zip
          path: build/image/**
          retention-days: 10
          if-no-files-found: error

      - name: Release JLink
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          RELEASE_NAME: trinity-${{ runner.os }}-java-${{ matrix.jdk-version }}
        shell: bash
        run: |
          mv "build/image" "build/Trinity"
          pushd "build"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            zip -r "../$RELEASE_NAME-jlink.zip" "Trinity"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a "../$RELEASE_NAME-jlink.zip" "Trinity"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            zip -r ../"$RELEASE_NAME-jlink.zip" "Trinity"
          else
            exit 1
          fi
          popd
          gh release upload "${{ github.ref_name }}" "$RELEASE_NAME-jlink.zip"

  build-jpackage:

    name: jpackage / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build JPackage
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean jpackage -Penv=prod-jlink

      - name: Upload JPackage
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jpackage
          path: build/jpackage/**
          retention-days: 10
          if-no-files-found: error

      - name: Release JPackage
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          RELEASE_NAME: trinity-${{ runner.os }}-java-${{ matrix.jdk-version }}
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            mv build/jpackage/Trinity.app "Trinity.app"
            zip -r "$RELEASE_NAME-jpackage.zip" "Trinity.app"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv build/jpackage/** .
            7z a "$RELEASE_NAME-jpackage.zip" "Trinity"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            mv build/jpackage/** .
            zip -r "$RELEASE_NAME-jpackage.zip" "Trinity/bin" "Trinity/lib"
          else
            exit 1
          fi
          gh release upload "${{ github.ref_name }}" "$RELEASE_NAME-jpackage.zip"

  build-native:

    name: native / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    env:
      GRAALVM_VERSION: "gluon-22.1.0.1-Final"

    steps:

      - uses: actions/checkout@v3

      # https://github.com/gluonhq/substrate
      - name: Linux Only - Install Additional Dependencies needed by substrate
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libfreetype6-dev
          sudo apt-get install --yes --no-install-recommends libgl-dev libglib2.0-dev libgtk-3-dev libpango1.0-dev libx11-dev libxtst-dev zlib1g-dev

      # Setup CL, msbuild, etc.
      - name: Windows Only - Enable Windows Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.12.1
        if: runner.os == 'Windows'
        with:
          arch: x64

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Set Up GraalVM ${{ matrix.jdk-version }}
        shell: bash
        env:
          GRAALVM_NIX_URL: "https://github.com/gluonhq/graal/releases/download/${{ env.GRAALVM_VERSION }}/graalvm-svm-java17-linux-${{ env.GRAALVM_VERSION }}.tar.gz"
          GRAALVM_OSX_URL: "https://github.com/gluonhq/graal/releases/download/${{ env.GRAALVM_VERSION }}/graalvm-svm-java17-darwin-${{ env.GRAALVM_VERSION }}.tar.gz"
          GRAALVM_WIN_URL: "https://github.com/gluonhq/graal/releases/download/${{ env.GRAALVM_VERSION }}/graalvm-svm-java17-windows-${{ env.GRAALVM_VERSION }}.zip"
        run: |
          mkdir graalvm
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -sSfL "${GRAALVM_OSX_URL}" | tar -xzv --strip-components 3 -C graalvm
            echo "GRAALVM_HOME=${{ github.workspace }}/graalvm" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -sSfL "${GRAALVM_NIX_URL}" | tar -xzv --strip-components 1 -C graalvm
            echo "GRAALVM_HOME=${{ github.workspace }}/graalvm" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -sSfL "${GRAALVM_WIN_URL}" -o graalvm.zip
            unzip graalvm.zip -d graalvm
            cd graalvm
            mv */* .
            echo "GRAALVM_HOME=${{ github.workspace }}\graalvm" >> $GITHUB_ENV
          else
            exit 1
          fi

      - name: Gradle Build Native
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean nativeBuild --stacktrace -Penv=prod-graal

      - name: Upload Native
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-native
          path: build/gluonfx/**/trinity*
          retention-days: 10
          if-no-files-found: error

      - name: Release Native
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          RELEASE_NAME: trinity-${{ runner.os }}-java-${{ matrix.jdk-version }}
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            mv build/gluonfx/**/trinity* "Trinity.app"
            zip "$RELEASE_NAME-native.zip" "Trinity.app"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv build/gluonfx/**/trinity*.exe "Trinity.exe"
            7z a "$RELEASE_NAME-native.zip" "Trinity.exe"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            mv build/gluonfx/**/trinity* "Trinity.elf"
            zip "$RELEASE_NAME-native.zip" "Trinity.elf"
          else
            exit 1
          fi
          gh release upload "${{ github.ref_name }}" "$RELEASE_NAME-native.zip"
