# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Gradle Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [ "published" ]

permissions:
  contents: write

# cancel in progress jobs or runs for the current workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:

  build-jar:

    name: jar / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build Jar
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build jar -Penv=prod-jar

      - name: Upload Jar
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jar
          path: build/libs/*-fx.jar
          retention-days: 10
          if-no-files-found: error

  build-jlink:

    name: jlink / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build JLink Zip
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build jlinkZip -Penv=prod-jlink

      - name: Upload JLink Zip
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jlink-zip
          path: build/distributions/*.zip
          retention-days: 10
          if-no-files-found: error

  build-jpackage:

    name: jpackage / ${{ matrix.os }} / ${{ matrix.jdk-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        jdk-version: [ 17 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - uses: actions/checkout@v3

      - name: Set Up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'temurin'

      - name: Gradle Build JPackage
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build jpackage -Penv=prod-jlink

      - name: Upload JPackage
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: java-${{ matrix.jdk-version }}-${{ runner.os }}-jpackage
          path: build/jpackage/**
          retention-days: 10
          if-no-files-found: error

      - name: Release JPackage
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          RELEASE_NAME: trinity-${{ runner.os }}-java-${{ matrix.jdk-version }}
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            mv build/jpackage/Trinity.app "Trinity.app"
            zip -r "$RELEASE_NAME-jpackage.zip" "Trinity.app"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv build/jpackage/** .
            7z a "$RELEASE_NAME-jpackage.zip" "Trinity"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            mv build/jpackage/** .
            zip -r "$RELEASE_NAME-jpackage.zip" "Trinity/bin" "Trinity/lib"
          else
            exit 1
          fi
          gh release upload "$GITHUB_REF_NAME" "$RELEASE_NAME-jpackage.zip"
